import { toast } from 'sonner';

interface AuthNotificationOptions {
  duration?: number;
  position?: 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';
}

export const useAuthNotifications = () => {
  const showTokenRefreshSuccess = (options?: AuthNotificationOptions) => {
    toast.success('üîÑ Token renovado automaticamente', {
      description: 'Sua sess√£o foi estendida com sucesso',
      duration: 3000,
      ...options
    });
  };

  const showTokenRefreshError = (error?: string, options?: AuthNotificationOptions) => {
    toast.error('‚ùå Erro na renova√ß√£o do token', {
      description: error || 'N√£o foi poss√≠vel renovar sua sess√£o. Fa√ßa login novamente.',
      duration: 5000,
      ...options
    });
  };

  const showTokenExpired = (options?: AuthNotificationOptions) => {
    toast.warning('‚è∞ Sess√£o expirada', {
      description: 'Sua sess√£o expirou. Redirecionando para login...',
      duration: 4000,
      ...options
    });
  };

  const showLoginSuccess = (userName?: string, options?: AuthNotificationOptions) => {
    toast.success('‚úÖ Login realizado com sucesso', {
      description: userName ? `Bem-vindo(a), ${userName}!` : 'Bem-vindo(a) de volta!',
      duration: 3000,
      ...options
    });
  };

  const showLoginError = (error?: string, options?: AuthNotificationOptions) => {
    toast.error('‚ùå Erro no login', {
      description: error || 'Credenciais inv√°lidas. Verifique seu email e senha.',
      duration: 5000,
      ...options
    });
  };

  const showLogoutSuccess = (options?: AuthNotificationOptions) => {
    toast.success('üëã Logout realizado', {
      description: 'Voc√™ foi desconectado com sucesso',
      duration: 2000,
      ...options
    });
  };

  const showRegistrationSuccess = (options?: AuthNotificationOptions) => {
    toast.success('üéâ Conta criada com sucesso', {
      description: 'Sua conta foi criada. Fa√ßa login para continuar.',
      duration: 4000,
      ...options
    });
  };

  const showRegistrationError = (error?: string, options?: AuthNotificationOptions) => {
    toast.error('‚ùå Erro no cadastro', {
      description: error || 'N√£o foi poss√≠vel criar sua conta. Tente novamente.',
      duration: 5000,
      ...options
    });
  };

  const showUnauthorizedAccess = (options?: AuthNotificationOptions) => {
    toast.error('üö´ Acesso negado', {
      description: 'Voc√™ n√£o tem permiss√£o para acessar este recurso',
      duration: 4000,
      ...options
    });
  };

  const showNetworkError = (options?: AuthNotificationOptions) => {
    toast.error('üåê Erro de conex√£o', {
      description: 'Verifique sua conex√£o com a internet e tente novamente',
      duration: 5000,
      ...options
    });
  };

  const showSessionWarning = (minutesLeft: number, options?: AuthNotificationOptions) => {
    toast.warning('‚ö†Ô∏è Sess√£o expirando', {
      description: `Sua sess√£o expirar√° em ${minutesLeft} minutos. Salve seu trabalho.`,
      duration: 8000,
      ...options
    });
  };

  const showMaintenanceMode = (options?: AuthNotificationOptions) => {
    toast.info('üîß Modo de manuten√ß√£o', {
      description: 'O sistema est√° em manuten√ß√£o. Tente novamente em alguns minutos.',
      duration: 6000,
      ...options
    });
  };

  return {
    showTokenRefreshSuccess,
    showTokenRefreshError,
    showTokenExpired,
    showLoginSuccess,
    showLoginError,
    showLogoutSuccess,
    showRegistrationSuccess,
    showRegistrationError,
    showUnauthorizedAccess,
    showNetworkError,
    showSessionWarning,
    showMaintenanceMode
  };
};

export default useAuthNotifications;
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Fun√ß√£o para criar arquivo de v√≠deo simulado
function createMockVideoFile(filePath, sizeInBytes = 1024000) {
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }
    
    // Criar arquivo com dados simulados
    const buffer = Buffer.alloc(sizeInBytes, 0);
    fs.writeFileSync(filePath, buffer);
    
    return fs.statSync(filePath);
}

// Fun√ß√£o para simular webhook do ZLMediaKit
async function simulateZLMediaKitWebhook(cameraId, recordingData) {
    console.log('üì° Simulando webhook do ZLMediaKit...');
    
    try {
        const response = await fetch('http://localhost:3002/api/webhook/zlmediakit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                hook: 'on_record_mp4',
                mediaServerId: 'test-server',
                app: 'live',
                stream: cameraId,
                file_path: recordingData.file_path,
                file_size: recordingData.file_size,
                folder: path.dirname(recordingData.file_path),
                start_time: Math.floor(Date.now() / 1000) - recordingData.duration,
                time_len: recordingData.duration,
                url: `rtmp://localhost/live/${cameraId}`,
                vhost: '__defaultVhost__'
            })
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ Webhook processado com sucesso:', result);
            return result;
        } else {
            const error = await response.text();
            console.error('‚ùå Erro no webhook:', response.status, error);
            return null;
        }
    } catch (error) {
        console.error('‚ùå Erro ao chamar webhook:', error.message);
        return null;
    }
}

async function simulateCompleteRecordingFlow() {
    console.log('üé¨ Simulando fluxo completo de grava√ß√£o...');
    
    try {
        // 1. Verificar c√¢meras dispon√≠veis
        console.log('\n1Ô∏è‚É£ Buscando c√¢meras dispon√≠veis...');
        const { data: cameras, error: camerasError } = await supabase
            .from('cameras')
            .select('*')
            .eq('active', true);
            
        if (camerasError || !cameras || cameras.length === 0) {
            console.error('‚ùå Nenhuma c√¢mera ativa encontrada:', camerasError);
            return;
        }
        
        const testCamera = cameras[0];
        console.log(`‚úÖ Usando c√¢mera: ${testCamera.name} (ID: ${testCamera.id})`);
        
        // 2. Criar arquivo de grava√ß√£o simulado
        console.log('\n2Ô∏è‚É£ Criando arquivo de grava√ß√£o simulado...');
        const timestamp = Date.now();
        const filename = `recording_${timestamp}.mp4`;
        const recordingsDir = path.join(__dirname, 'recordings');
        const filePath = path.join(recordingsDir, filename);
        
        const fileStats = createMockVideoFile(filePath, 2048000); // 2MB
        console.log(`‚úÖ Arquivo criado: ${filePath} (${fileStats.size} bytes)`);
        
        // 3. Simular dados de grava√ß√£o
        const recordingData = {
            camera_id: testCamera.id,
            filename: filename,
            file_path: filePath,
            file_size: fileStats.size,
            duration: 60, // 60 segundos
            start_time: new Date(timestamp - 60000).toISOString(),
            end_time: new Date(timestamp).toISOString()
        };
        
        // 4. Simular webhook do ZLMediaKit
        console.log('\n3Ô∏è‚É£ Simulando webhook do ZLMediaKit...');
        const webhookResult = await simulateZLMediaKitWebhook(testCamera.id, recordingData);
        
        if (!webhookResult) {
            console.error('‚ùå Webhook falhou, continuando com inser√ß√£o manual...');
            
            // Inser√ß√£o manual no banco
            const { data: newRecording, error: insertError } = await supabase
                .from('recordings')
                .insert([{
                    ...recordingData,
                    status: 'completed'
                }])
                .select()
                .single();
                
            if (insertError) {
                console.error('‚ùå Erro ao inserir grava√ß√£o:', insertError);
                return;
            }
            
            console.log('‚úÖ Grava√ß√£o inserida manualmente no banco');
        }
        
        // 5. Verificar se a grava√ß√£o foi salva corretamente
        console.log('\n4Ô∏è‚É£ Verificando grava√ß√£o no banco...');
        const { data: savedRecordings, error: fetchError } = await supabase
            .from('recordings')
            .select('*')
            .eq('filename', filename);
            
        if (fetchError || !savedRecordings || savedRecordings.length === 0) {
            console.error('‚ùå Grava√ß√£o n√£o encontrada no banco:', fetchError);
            return;
        }
        
        const savedRecording = savedRecordings[0];
        console.log('‚úÖ Grava√ß√£o encontrada no banco:');
        console.log(`   ID: ${savedRecording.id}`);
        console.log(`   Arquivo: ${savedRecording.filename}`);
        console.log(`   Tamanho: ${savedRecording.file_size} bytes`);
        console.log(`   Status: ${savedRecording.status}`);
        
        // 6. Verificar se o arquivo f√≠sico ainda existe
        console.log('\n5Ô∏è‚É£ Verificando arquivo f√≠sico...');
        if (fs.existsSync(savedRecording.file_path)) {
            const currentStats = fs.statSync(savedRecording.file_path);
            console.log(`‚úÖ Arquivo f√≠sico existe: ${currentStats.size} bytes`);
            
            if (currentStats.size === savedRecording.file_size) {
                console.log('‚úÖ Tamanho do arquivo confere com o banco');
            } else {
                console.log('‚ö†Ô∏è Tamanho do arquivo difere do banco');
            }
        } else {
            console.error('‚ùå Arquivo f√≠sico n√£o encontrado!');
        }
        
        // 7. Testar endpoint de download
        console.log('\n6Ô∏è‚É£ Testando endpoint de download...');
        try {
            const downloadResponse = await fetch(`http://localhost:3002/api/recordings/${savedRecording.id}/download`);
            
            if (downloadResponse.ok) {
                console.log('‚úÖ Endpoint de download respondeu corretamente');
                console.log(`   Content-Type: ${downloadResponse.headers.get('content-type')}`);
                console.log(`   Content-Length: ${downloadResponse.headers.get('content-length')}`);
            } else {
                console.error(`‚ùå Erro no endpoint de download: ${downloadResponse.status}`);
            }
        } catch (error) {
            console.error('‚ùå Erro ao testar download:', error.message);
        }
        
        // 8. Testar endpoint de streaming
        console.log('\n7Ô∏è‚É£ Testando endpoint de streaming...');
        try {
            const streamResponse = await fetch(`http://localhost:3002/api/recordings/${savedRecording.id}/stream`);
            
            if (streamResponse.ok) {
                console.log('‚úÖ Endpoint de streaming respondeu corretamente');
                console.log(`   Content-Type: ${streamResponse.headers.get('content-type')}`);
            } else {
                console.error(`‚ùå Erro no endpoint de streaming: ${streamResponse.status}`);
            }
        } catch (error) {
            console.error('‚ùå Erro ao testar streaming:', error.message);
        }
        
        console.log('\nüéâ Simula√ß√£o do fluxo de grava√ß√£o conclu√≠da!');
        console.log(`\nüìã Resumo:`);
        console.log(`   Grava√ß√£o ID: ${savedRecording.id}`);
        console.log(`   Arquivo: ${savedRecording.filename}`);
        console.log(`   Caminho: ${savedRecording.file_path}`);
        console.log(`   Tamanho: ${savedRecording.file_size} bytes`);
        console.log(`   Status: ${savedRecording.status}`);
        
        return savedRecording;
        
    } catch (error) {
        console.error('‚ùå Erro durante a simula√ß√£o:', error);
    }
}

// Executar simula√ß√£o
simulateCompleteRecordingFlow();
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import fetch from 'node-fetch';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const baseUrl = 'http://localhost:3002';

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testRecordingEndpoints() {
    console.log('üß™ Testando endpoints de grava√ß√£o com autentica√ß√£o...');
    
    try {
        // 1. Buscar uma grava√ß√£o existente
        console.log('\n1Ô∏è‚É£ Buscando grava√ß√£o mais recente...');
        const { data: recordings, error } = await supabase
            .from('recordings')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(1);
            
        if (error) {
            console.error('‚ùå Erro ao buscar grava√ß√µes:', error);
            return;
        }
        
        if (!recordings || recordings.length === 0) {
            console.log('‚ùå Nenhuma grava√ß√£o encontrada no banco');
            return;
        }
        
        const recording = recordings[0];
        console.log('‚úÖ Grava√ß√£o encontrada:', {
            id: recording.id,
            filename: recording.filename,
            status: recording.status,
            file_size: recording.file_size
        });
        
        // 2. Testar endpoint de download sem autentica√ß√£o
        console.log('\n2Ô∏è‚É£ Testando endpoint de download (sem auth)...');
        try {
            const downloadResponse = await fetch(`${baseUrl}/api/recordings/${recording.id}/download`);
            console.log(`Status: ${downloadResponse.status}`);
            
            if (downloadResponse.status === 401) {
                console.log('üîí Endpoint requer autentica√ß√£o (esperado)');
            } else if (downloadResponse.ok) {
                console.log('‚úÖ Download funcionando');
            } else {
                console.log(`‚ùå Erro inesperado: ${downloadResponse.status}`);
            }
        } catch (error) {
            console.log('‚ùå Erro na requisi√ß√£o de download:', error.message);
        }
        
        // 3. Testar endpoint de streaming sem autentica√ß√£o
        console.log('\n3Ô∏è‚É£ Testando endpoint de streaming (sem auth)...');
        try {
            const streamResponse = await fetch(`${baseUrl}/api/recordings/${recording.id}/stream`);
            console.log(`Status: ${streamResponse.status}`);
            
            if (streamResponse.status === 401) {
                console.log('üîí Endpoint requer autentica√ß√£o (esperado)');
            } else if (streamResponse.ok) {
                console.log('‚úÖ Streaming funcionando');
            } else {
                console.log(`‚ùå Erro inesperado: ${streamResponse.status}`);
            }
        } catch (error) {
            console.log('‚ùå Erro na requisi√ß√£o de streaming:', error.message);
        }
        
        // 4. Testar acesso direto ao arquivo est√°tico
        console.log('\n4Ô∏è‚É£ Testando acesso direto ao arquivo est√°tico...');
        try {
            const staticResponse = await fetch(`${baseUrl}/recordings/${recording.filename}`);
            console.log(`Status: ${staticResponse.status}`);
            
            if (staticResponse.ok) {
                console.log('‚úÖ Acesso direto ao arquivo funcionando');
                console.log(`Content-Type: ${staticResponse.headers.get('content-type')}`);
                console.log(`Content-Length: ${staticResponse.headers.get('content-length')}`);
            } else {
                console.log(`‚ùå Erro no acesso direto: ${staticResponse.status}`);
            }
        } catch (error) {
            console.log('‚ùå Erro no acesso direto:', error.message);
        }
        
        // 5. Verificar se o arquivo f√≠sico existe
        console.log('\n5Ô∏è‚É£ Verificando arquivo f√≠sico...');
        const fs = await import('fs');
        const path = await import('path');
        
        const recordingPath = path.join(process.cwd(), 'recordings', recording.filename);
        
        try {
            const stats = fs.statSync(recordingPath);
            console.log('‚úÖ Arquivo f√≠sico existe:', {
                path: recordingPath,
                size: stats.size,
                created: stats.birthtime
            });
        } catch (error) {
            console.log('‚ùå Arquivo f√≠sico n√£o encontrado:', recordingPath);
        }
        
        console.log('\nüéØ Teste conclu√≠do!');
        console.log('\nüìã Pr√≥ximos passos:');
        console.log('   1. Verificar configura√ß√£o de autentica√ß√£o nos endpoints');
        console.log('   2. Testar com token v√°lido se necess√°rio');
        console.log('   3. Verificar se o acesso direto aos arquivos est√° funcionando');
        
    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error);
    }
}

testRecordingEndpoints();
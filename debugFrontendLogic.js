// Simula√ß√£o da l√≥gica do frontend para debug

function simulateFrontendValidation() {
  console.log('üîç Simulando l√≥gica do frontend...');
  
  // Simular formData como no frontend
  const formData = {
    name: 'Teste RTMP Debug',
    ip_address: '',
    rtsp_url: '',
    rtmp_url: 'rtmp://test.example.com/live/stream123',
    location: '',
    stream_type: 'rtmp',
    type: 'ip'
  };
  
  console.log('FormData inicial:', JSON.stringify(formData, null, 2));
  
  // Valida√ß√£o 1: Nome obrigat√≥rio
  if (!formData.name.trim()) {
    console.log('‚ùå Erro: Nome √© obrigat√≥rio');
    return false;
  }
  console.log('‚úÖ Nome v√°lido');
  
  // Valida√ß√£o 2: Stream type v√°lido
  if (!formData.stream_type || !['rtsp', 'rtmp'].includes(formData.stream_type)) {
    console.log('‚ùå Erro: Tipo de stream deve ser RTSP ou RTMP');
    return false;
  }
  console.log('‚úÖ Stream type v√°lido:', formData.stream_type);
  
  // Valida√ß√£o 3: URL espec√≠fica por tipo
  if (formData.stream_type === 'rtmp') {
    if (!formData.rtmp_url.trim()) {
      console.log('‚ùå Erro: URL RTMP √© obrigat√≥ria');
      return false;
    }
    if (!formData.rtmp_url.startsWith('rtmp://')) {
      console.log('‚ùå Erro: URL RTMP deve come√ßar com rtmp://');
      return false;
    }
    console.log('‚úÖ URL RTMP v√°lida:', formData.rtmp_url);
  } else if (formData.stream_type === 'rtsp') {
    if (!formData.rtsp_url.trim()) {
      console.log('‚ùå Erro: URL RTSP √© obrigat√≥ria');
      return false;
    }
    if (!formData.rtsp_url.startsWith('rtsp://')) {
      console.log('‚ùå Erro: URL RTSP deve come√ßar com rtsp://');
      return false;
    }
    console.log('‚úÖ URL RTSP v√°lida:', formData.rtsp_url);
  }
  
  // Valida√ß√£o 4: Pelo menos uma URL ou IP
  const hasUrl = (formData.stream_type === 'rtmp' && formData.rtmp_url.trim()) || 
                 (formData.stream_type === 'rtsp' && formData.rtsp_url.trim());
  const hasIp = formData.ip_address.trim();
  
  console.log('hasUrl:', hasUrl);
  console.log('hasIp:', hasIp);
  
  if (!hasUrl && !hasIp) {
    console.log('‚ùå Erro: √â necess√°rio fornecer pelo menos uma URL de stream ou endere√ßo IP');
    return false;
  }
  console.log('‚úÖ Pelo menos uma URL ou IP fornecido');
  
  // Constru√ß√£o do payload
  const payload = {
    name: formData.name.trim(),
    type: 'ip',
    stream_type: formData.stream_type || 'rtsp'
  };
  
  // Valida√ß√£o adicional duplicada (como no c√≥digo original)
  const hasRtmpUrl = formData.stream_type === 'rtmp' && formData.rtmp_url.trim();
  const hasRtspUrl = formData.stream_type === 'rtsp' && formData.rtsp_url.trim();
  const hasIpAddress = formData.ip_address.trim();
  
  console.log('hasRtmpUrl:', hasRtmpUrl);
  console.log('hasRtspUrl:', hasRtspUrl);
  console.log('hasIpAddress:', hasIpAddress);
  
  if (!hasRtmpUrl && !hasRtspUrl && !hasIpAddress) {
    console.log('‚ùå Erro: Valida√ß√£o adicional falhou - √â necess√°rio fornecer pelo menos uma URL de stream ou endere√ßo IP');
    return false;
  }
  console.log('‚úÖ Valida√ß√£o adicional passou');
  
  // Adicionar campos opcionais
  if (formData.ip_address.trim()) {
    payload.ip_address = formData.ip_address.trim();
    console.log('‚ûï Adicionado ip_address:', payload.ip_address);
  }
  
  if (formData.location.trim()) {
    payload.location = formData.location.trim();
    console.log('‚ûï Adicionado location:', payload.location);
  }
  
  // Adicionar URL baseado no tipo de stream
  if (formData.stream_type === 'rtmp') {
    payload.rtmp_url = formData.rtmp_url.trim();
    console.log('‚ûï Adicionado rtmp_url:', payload.rtmp_url);
  } else {
    payload.rtsp_url = formData.rtsp_url.trim();
    console.log('‚ûï Adicionado rtsp_url:', payload.rtsp_url);
  }
  
  console.log('\nüì¶ Payload final:', JSON.stringify(payload, null, 2));
  
  return payload;
}

// Testar diferentes cen√°rios
console.log('='.repeat(50));
console.log('TESTE 1: RTMP com URL v√°lida');
console.log('='.repeat(50));
simulateFrontendValidation();

console.log('\n' + '='.repeat(50));
console.log('TESTE 2: RTMP sem URL');
console.log('='.repeat(50));

// Simular formData sem URL RTMP
function simulateEmptyRtmpUrl() {
  const formData = {
    name: 'Teste RTMP Vazio',
    ip_address: '',
    rtsp_url: '',
    rtmp_url: '', // URL vazia
    location: '',
    stream_type: 'rtmp',
    type: 'ip'
  };
  
  console.log('FormData com RTMP vazio:', JSON.stringify(formData, null, 2));
  
  if (formData.stream_type === 'rtmp') {
    if (!formData.rtmp_url.trim()) {
      console.log('‚ùå Erro: URL RTMP √© obrigat√≥ria (como esperado)');
      return false;
    }
  }
  
  return true;
}

simulateEmptyRtmpUrl();

console.log('\n' + '='.repeat(50));
console.log('TESTE 3: RTMP com IP mas sem URL');
console.log('='.repeat(50));

// Simular formData com IP mas sem URL RTMP
function simulateRtmpWithIp() {
  const formData = {
    name: 'Teste RTMP com IP',
    ip_address: '192.168.1.100',
    rtsp_url: '',
    rtmp_url: '', // URL vazia mas tem IP
    location: '',
    stream_type: 'rtmp',
    type: 'ip'
  };
  
  console.log('FormData com IP mas sem RTMP URL:', JSON.stringify(formData, null, 2));
  
  // Valida√ß√£o espec√≠fica por tipo de stream
  if (formData.stream_type === 'rtmp') {
    if (!formData.rtmp_url.trim()) {
      console.log('‚ùå Erro: URL RTMP √© obrigat√≥ria (mesmo com IP)');
      return false;
    }
  }
  
  return true;
}

simulateRtmpWithIp();
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # CORS headers for streaming
    map $http_origin $cors_header {
        default "";
        "~^https?://localhost(:[0-9]+)?$" "$http_origin";
        "~^https?://127\.0\.0\.1(:[0-9]+)?$" "$http_origin";
        "~^https?://[^/]+\.newcam\.local(:[0-9]+)?$" "$http_origin";
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=streams:10m rate=5r/s;

    # Upstream servers
    upstream backend {
        server host.docker.internal:3002;
        keepalive 32;
    }

    upstream worker {
        server host.docker.internal:3001;
        keepalive 16;
    }

    upstream zlmediakit {
        server zlmediakit:8000;
        keepalive 16;
    }

    upstream srs {
        server srs:8080;
        keepalive 16;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost newcam.local 66.94.104.241;
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; font-src 'self'; connect-src 'self' ws: wss:; media-src 'self' blob:; object-src 'none'; base-uri 'self'; form-action 'self';" always;

        # CORS headers
        add_header Access-Control-Allow-Origin $cors_header always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        add_header Access-Control-Allow-Credentials "true" always;

        # Handle preflight requests for CORS will be handled in specific locations

        # API proxy to backend
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }

        # Worker API proxy
        location /worker/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://worker/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }

        # HLS streams from local storage
        location /streams/ {
            limit_req zone=streams burst=10 nodelay;
            
            alias /usr/share/nginx/html/streams/;
            
            # HLS specific settings
            location ~* \.(m3u8)$ {
                expires 1s;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
            }
            
            location ~* \.(ts)$ {
                expires 1h;
                add_header Cache-Control "public, immutable";
            }
        }

        # Recordings
        location /recordings/ {
            alias /usr/share/nginx/html/recordings/;
            autoindex on;
            autoindex_exact_size off;
            autoindex_localtime on;
            
            # Video files
            location ~* \.(mp4|avi|mkv|mov|flv)$ {
                expires 1d;
                add_header Cache-Control "public";
            }
        }

        # ZLMediaKit proxy for live streams
        location /zlm/ {
            limit_req zone=streams burst=20 nodelay;
            
            proxy_pass http://zlmediakit/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
            proxy_cache off;
        }

        # Live streams proxy for HLS - MUST be before generic location /
        location /live/ {
            limit_req zone=streams burst=20 nodelay;
            
            proxy_pass http://zlmediakit/live/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
            proxy_cache off;
            
            # HLS specific settings
            location ~* \.m3u8$ {
                expires 1s;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Access-Control-Allow-Origin "*";
            }
            
            location ~* \.ts$ {
                expires 1h;
                add_header Cache-Control "public, immutable";
                add_header Access-Control-Allow-Origin "*";
            }
        }

        # SRS proxy for live streams
        location /srs/ {
            limit_req zone=streams burst=20 nodelay;
            
            proxy_pass http://srs/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
            proxy_cache off;
        }

        # WebSocket proxy for real-time communication
        location /socket.io/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Static files and SPA routing - MUST be LAST
        location / {
            try_files $uri $uri/ /index.html;
            expires 1h;
            add_header Cache-Control "public";
        }
        
        # Assets with longer cache
        location /assets/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Favicon
        location = /favicon.svg {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # RTMP statistics server (optional)
    server {
        listen 8083;
        server_name stats.newcam.local;
        
        location / {
            return 301 http://$host:8082/api/stats;
        }
        
        location /stats {
            proxy_pass http://zlmediakit/api/getStatistic;
            proxy_set_header Host $host;
            add_header Content-Type application/json;
        }
    }
}
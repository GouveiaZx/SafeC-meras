version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: newcam-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-newcam}
      POSTGRES_USER: ${POSTGRES_USER:-newcam_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_here}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - newcam-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-newcam_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: newcam-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_here}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - newcam-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  srs:
    image: ossrs/srs:5
    container_name: newcam-srs
    ports:
      - "${SRS_RTMP_PORT:-1935}:1935"   # RTMP
      - "${SRS_HTTP_PORT:-8080}:8080"   # HTTP API
      - "${SRS_HLS_PORT:-8081}:8081"    # HLS
    volumes:
      - ./srs.conf:/usr/local/srs/conf/srs.conf:ro
      - ${STREAMS_DIR:-./streams}:/var/www/streams
      - srs_logs:/usr/local/srs/objs
    restart: unless-stopped
    networks:
      - newcam-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/summaries"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: newcam-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ${STREAMS_DIR:-./streams}:/var/www/streams:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - srs
    restart: unless-stopped
    networks:
      - newcam-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Opcional: Adminer para gerenciamento do banco
  adminer:
    image: adminer:latest
    container_name: newcam-adminer
    ports:
      - "${ADMINER_PORT:-8082}:8080"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - newcam-network
    profiles:
      - tools

  # Opcional: Redis Commander para gerenciamento do Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: newcam-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-redis_password_here}
    ports:
      - "${REDIS_COMMANDER_PORT:-8083}:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - newcam-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  srs_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  newcam-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
#!/bin/bash

# =========================================================
# SCRIPT DE DEPLOY AUTOMATIZADO - SISTEMA NEWCAM
# =========================================================
# Servidor: nuvem.safecameras.com.br (66.94.104.241)
# Autor: NewCAM Development Team
# Vers√£o: 2.0
# Data: $(date +%Y-%m-%d)

set -e  # Exit on any error

# =========================================================
# CONFIGURA√á√ïES
# =========================================================
SERVER_IP="66.94.104.241"
SERVER_USER="root"
SERVER_PATH="/var/www/newcam"
LOCAL_PROJECT_PATH="$(pwd)"
BACKUP_PREFIX="newcam_deploy_$(date +%Y%m%d_%H%M%S)"
SSH_KEY_PATH="$HOME/.ssh/id_rsa"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# =========================================================
# FUN√á√ïES AUXILIARES
# =========================================================

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

show_banner() {
    echo "==========================================================="
    echo "üöÄ DEPLOY AUTOMATIZADO - SISTEMA NEWCAM"
    echo "==========================================================="
    echo "Servidor: nuvem.safecameras.com.br"
    echo "IP: $SERVER_IP"
    echo "Timestamp: $(date)"
    echo "==========================================================="
    echo ""
}

check_prerequisites() {
    log_info "Verificando pr√©-requisitos..."
    
    # Verificar se estamos no diret√≥rio correto
    if [[ ! -f "package.json" ]] || [[ ! -d "backend" ]] || [[ ! -d "frontend" ]]; then
        log_error "Execute este script no diret√≥rio raiz do projeto NewCAM"
        exit 1
    fi
    
    # Verificar Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js n√£o encontrado. Instale Node.js 18+"
        exit 1
    fi
    
    # Verificar npm
    if ! command -v npm &> /dev/null; then
        log_error "npm n√£o encontrado"
        exit 1
    fi
    
    # Verificar SSH key
    if [[ ! -f "$SSH_KEY_PATH" ]]; then
        log_warning "Chave SSH n√£o encontrada em $SSH_KEY_PATH"
        log_info "Certifique-se de ter acesso SSH ao servidor"
    fi
    
    # Verificar conex√£o com servidor
    if ! ssh -q -o ConnectTimeout=5 -o BatchMode=yes "$SERVER_USER@$SERVER_IP" exit; then
        log_error "N√£o foi poss√≠vel conectar ao servidor $SERVER_IP"
        log_info "Verifique sua conex√£o SSH e credenciais"
        exit 1
    fi
    
    log_success "Pr√©-requisitos verificados"
}

build_project() {
    log_info "üî® Iniciando build do projeto..."
    
    # Limpar builds anteriores
    log_info "Limpando builds anteriores..."
    rm -rf frontend/dist/ backend/dist/ || true
    
    # Build do frontend
    log_info "üì¶ Fazendo build do frontend..."
    cd frontend
    
    # Configurar ambiente de produ√ß√£o
    cp .env.production .env
    
    # Instalar depend√™ncias
    npm ci --silent
    
    # Build
    npm run build
    
    if [[ ! -d "dist" ]]; then
        log_error "Build do frontend falhou - diret√≥rio dist n√£o criado"
        exit 1
    fi
    
    cd ..
    log_success "Build do frontend conclu√≠do"
    
    # Preparar backend
    log_info "üì¶ Preparando backend..."
    cd backend
    
    # Configurar ambiente de produ√ß√£o
    cp .env.production .env
    
    # Instalar apenas depend√™ncias de produ√ß√£o
    npm ci --production --silent
    
    cd ..
    log_success "Backend preparado"
    
    # Preparar worker
    log_info "üì¶ Preparando worker..."
    cd worker
    
    # Configurar ambiente de produ√ß√£o
    cp .env.production .env
    
    # Instalar apenas depend√™ncias de produ√ß√£o
    npm ci --production --silent
    
    cd ..
    log_success "Worker preparado"
    
    log_success "Build do projeto conclu√≠do"
}

create_deployment_package() {
    log_info "üì¶ Criando pacote de deploy..."
    
    local package_name="${BACKUP_PREFIX}.tar.gz"
    
    # Criar arquivo de exclus√µes
    cat > /tmp/deploy_exclude.txt << EOF
node_modules
.git
*.log
.env.local
.env.development
coverage
.nyc_output
.cache
dist
build
.DS_Store
Thumbs.db
*.swp
*.swo
*~
.vscode
.idea
storage/www/record
storage/recordings
storage/temp
backups
logs/*.log
EOF

    # Criar pacote tar
    log_info "Compactando arquivos..."
    tar -czf "$package_name" \
        --exclude-from="/tmp/deploy_exclude.txt" \
        --exclude="$package_name" \
        .
    
    if [[ ! -f "$package_name" ]]; then
        log_error "Falha ao criar pacote de deploy"
        exit 1
    fi
    
    local package_size=$(du -sh "$package_name" | cut -f1)
    log_success "Pacote criado: $package_name ($package_size)"
    
    # Limpar arquivo tempor√°rio
    rm -f /tmp/deploy_exclude.txt
    
    echo "$package_name"
}

upload_to_server() {
    local package_name="$1"
    
    log_info "üì§ Enviando pacote para servidor..."
    
    # Upload do pacote
    scp "$package_name" "$SERVER_USER@$SERVER_IP:/tmp/"
    
    if [[ $? -ne 0 ]]; then
        log_error "Falha no upload do pacote"
        exit 1
    fi
    
    log_success "Pacote enviado para servidor"
}

deploy_on_server() {
    local package_name="$1"
    
    log_info "üöÄ Executando deploy no servidor..."
    
    # Script para executar no servidor
    ssh "$SERVER_USER@$SERVER_IP" << EOF
set -e

echo "üîß Iniciando deploy no servidor..."

# Parar servi√ßos
echo "Parando servi√ßos..."
pm2 stop all || true

# Criar backup do deployment atual
if [[ -d "$SERVER_PATH" ]]; then
    echo "Criando backup do deployment atual..."
    sudo tar -czf "/var/backups/${BACKUP_PREFIX}_rollback.tar.gz" -C "$SERVER_PATH" . || true
fi

# Criar diret√≥rio se n√£o existir
sudo mkdir -p "$SERVER_PATH"
sudo chown -R \$USER:\$USER "$SERVER_PATH"

# Extrair novo deployment
echo "Extraindo arquivos..."
cd "$SERVER_PATH"
tar -xzf "/tmp/$package_name" --strip-components=0

# Configurar ambiente de produ√ß√£o
echo "Configurando ambiente de produ√ß√£o..."
cp .env.production.unified .env
cp .env backend/
cp .env frontend/
cp .env worker/

# Criar diret√≥rios necess√°rios
mkdir -p storage/{recordings,thumbnails,temp,logs}
mkdir -p logs

# Instalar depend√™ncias do backend (se necess√°rio)
cd backend
if [[ ! -d "node_modules" ]]; then
    echo "Instalando depend√™ncias do backend..."
    npm ci --production --silent
fi
cd ..

# Instalar depend√™ncias do worker (se necess√°rio)
cd worker
if [[ ! -d "node_modules" ]]; then
    echo "Instalando depend√™ncias do worker..."
    npm ci --production --silent
fi
cd ..

# Configurar permiss√µes
sudo chown -R www-data:www-data "$SERVER_PATH/storage"
sudo chmod -R 755 "$SERVER_PATH/storage"

# Configurar nginx se n√£o existir
if [[ ! -f "/etc/nginx/sites-available/newcam" ]]; then
    echo "Configurando Nginx..."
    sudo cp nginx.conf /etc/nginx/sites-available/newcam
    sudo ln -sf /etc/nginx/sites-available/newcam /etc/nginx/sites-enabled/
    sudo rm -f /etc/nginx/sites-enabled/default
    sudo nginx -t && sudo systemctl reload nginx
fi

# Iniciar servi√ßos com PM2
echo "Iniciando servi√ßos..."
pm2 delete all || true
pm2 start ecosystem.config.js
pm2 save

# Verificar status
sleep 5
pm2 status

# Health check
echo "Verificando health check..."
curl -f http://localhost:3002/health || echo "Health check falhou"

echo "‚úÖ Deploy conclu√≠do!"

# Limpar arquivo tempor√°rio
rm -f "/tmp/$package_name"
EOF

    if [[ $? -ne 0 ]]; then
        log_error "Falha no deploy no servidor"
        log_warning "Execute rollback se necess√°rio: ssh $SERVER_USER@$SERVER_IP 'cd $SERVER_PATH && tar -xzf /var/backups/${BACKUP_PREFIX}_rollback.tar.gz'"
        exit 1
    fi
    
    log_success "Deploy executado no servidor"
}

run_health_checks() {
    log_info "üè• Executando verifica√ß√µes de sa√∫de..."
    
    # Aguardar servi√ßos iniciarem
    sleep 10
    
    # Health check via SSH
    ssh "$SERVER_USER@$SERVER_IP" << 'EOF'
echo "Verificando servi√ßos..."

# PM2 status
echo "=== PM2 Status ==="
pm2 status

# Health check HTTP
echo "=== Health Check HTTP ==="
curl -s http://localhost:3002/health | jq . || echo "Health endpoint n√£o respondeu"

# Nginx status
echo "=== Nginx Status ==="
sudo systemctl is-active nginx

# Disk space
echo "=== Disk Usage ==="
df -h /var/www/newcam

# Memory usage
echo "=== Memory Usage ==="
free -h
EOF

    # Health check externo
    log_info "Testando acesso externo..."
    if curl -s -f "https://nuvem.safecameras.com.br/api/health" > /dev/null; then
        log_success "‚úÖ Sistema acess√≠vel externamente"
    else
        log_warning "‚ö†Ô∏è Sistema pode n√£o estar acess√≠vel externamente"
    fi
    
    log_success "Verifica√ß√µes de sa√∫de conclu√≠das"
}

cleanup() {
    log_info "üßπ Limpando arquivos tempor√°rios..."
    
    # Remover pacote local
    rm -f "${BACKUP_PREFIX}.tar.gz"
    
    # Restaurar arquivos .env locais
    if [[ -f "backend/.env.development" ]]; then
        cp backend/.env.development backend/.env
    fi
    
    if [[ -f "frontend/.env.development" ]]; then
        cp frontend/.env.development frontend/.env
    fi
    
    if [[ -f "worker/.env.development" ]]; then
        cp worker/.env.development worker/.env
    fi
    
    log_success "Limpeza conclu√≠da"
}

show_completion_info() {
    echo ""
    echo "==========================================================="
    echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
    echo "==========================================================="
    echo "üåê URL: https://nuvem.safecameras.com.br"
    echo "üîç Health: https://nuvem.safecameras.com.br/api/health"
    echo "üìä Logs: ssh $SERVER_USER@$SERVER_IP 'pm2 logs'"
    echo "üìà Monitor: ssh $SERVER_USER@$SERVER_IP 'pm2 monit'"
    echo ""
    echo "üîÑ Rollback (se necess√°rio):"
    echo "ssh $SERVER_USER@$SERVER_IP 'cd $SERVER_PATH && tar -xzf /var/backups/${BACKUP_PREFIX}_rollback.tar.gz && pm2 restart all'"
    echo "==========================================================="
}

# =========================================================
# FUN√á√ÉO PRINCIPAL
# =========================================================

main() {
    show_banner
    
    # Verificar argumentos
    if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
        echo "Uso: $0 [op√ß√µes]"
        echo ""
        echo "Op√ß√µes:"
        echo "  --dry-run    Simular deploy sem executar"
        echo "  --force      For√ßar deploy sem confirma√ß√£o"
        echo "  --help, -h   Mostrar esta ajuda"
        echo ""
        exit 0
    fi
    
    local dry_run=false
    local force=false
    
    if [[ "$1" == "--dry-run" ]]; then
        dry_run=true
        log_warning "Modo DRY RUN ativado - nenhuma altera√ß√£o ser√° feita"
    fi
    
    if [[ "$1" == "--force" ]]; then
        force=true
    fi
    
    # Confirma√ß√£o do usu√°rio
    if [[ "$force" != true ]]; then
        echo -n "Confirma o deploy para PRODU√á√ÉO (nuvem.safecameras.com.br)? [y/N]: "
        read -r confirmation
        if [[ "$confirmation" != "y" ]] && [[ "$confirmation" != "Y" ]]; then
            log_info "Deploy cancelado pelo usu√°rio"
            exit 0
        fi
    fi
    
    # Executar steps do deploy
    check_prerequisites
    
    if [[ "$dry_run" != true ]]; then
        build_project
        local package_name=$(create_deployment_package)
        upload_to_server "$package_name"
        deploy_on_server "$package_name"
        run_health_checks
        cleanup
        show_completion_info
    else
        log_info "DRY RUN: Simulando build do projeto..."
        log_info "DRY RUN: Simulando cria√ß√£o do pacote..."
        log_info "DRY RUN: Simulando upload para servidor..."
        log_info "DRY RUN: Simulando deploy no servidor..."
        log_success "DRY RUN conclu√≠do - nenhuma altera√ß√£o foi feita"
    fi
}

# =========================================================
# TRAP PARA CLEANUP EM CASO DE ERRO
# =========================================================

trap 'log_error "Deploy falhou! Executando limpeza..."; cleanup; exit 1' ERR

# =========================================================
# EXECU√á√ÉO
# =========================================================

main "$@"
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testRecordingSystem() {
    console.log('üß™ Testando sistema de grava√ß√µes...');
    
    try {
        // 1. Verificar c√¢meras configuradas
        console.log('\n1Ô∏è‚É£ Verificando c√¢meras configuradas...');
        const { data: cameras, error: camerasError } = await supabase
            .from('cameras')
            .select('*');
            
        if (camerasError) {
            console.error('‚ùå Erro ao buscar c√¢meras:', camerasError);
            return;
        }
        
        console.log(`‚úÖ Encontradas ${cameras.length} c√¢meras:`);
        cameras.forEach(camera => {
            console.log(`   - ${camera.name} (ID: ${camera.id}, Status: ${camera.status})`);
        });
        
        // 2. Verificar grava√ß√µes existentes
        console.log('\n2Ô∏è‚É£ Verificando grava√ß√µes existentes...');
        const { data: recordings, error: recordingsError } = await supabase
            .from('recordings')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(10);
            
        if (recordingsError) {
            console.error('‚ùå Erro ao buscar grava√ß√µes:', recordingsError);
            return;
        }
        
        console.log(`‚úÖ Encontradas ${recordings.length} grava√ß√µes recentes:`);
        recordings.forEach(recording => {
            console.log(`   - ${recording.filename} (C√¢mera: ${recording.camera_id}, Status: ${recording.status})`);
            console.log(`     Arquivo: ${recording.file_path}`);
            console.log(`     Tamanho: ${recording.file_size} bytes`);
            
            // Verificar se o arquivo existe
            if (recording.file_path && fs.existsSync(recording.file_path)) {
                console.log(`     ‚úÖ Arquivo f√≠sico existe`);
            } else {
                console.log(`     ‚ùå Arquivo f√≠sico N√ÉO existe`);
            }
            console.log('');
        });
        
        // 3. Testar cria√ß√£o de grava√ß√£o simulada
        console.log('\n3Ô∏è‚É£ Testando cria√ß√£o de grava√ß√£o simulada...');
        
        if (cameras.length > 0) {
            const testCamera = cameras[0];
            const testRecording = {
                camera_id: testCamera.id,
                filename: `test_recording_${Date.now()}.mp4`,
                file_path: path.join(__dirname, 'recordings', `test_recording_${Date.now()}.mp4`),
                file_size: 1024000, // 1MB simulado
                duration: 30, // 30 segundos
                status: 'completed',
                start_time: new Date().toISOString(),
                end_time: new Date(Date.now() + 30000).toISOString()
            };
            
            const { data: newRecording, error: insertError } = await supabase
                .from('recordings')
                .insert([testRecording])
                .select()
                .single();
                
            if (insertError) {
                console.error('‚ùå Erro ao inserir grava√ß√£o de teste:', insertError);
            } else {
                console.log('‚úÖ Grava√ß√£o de teste criada com sucesso:');
                console.log(`   ID: ${newRecording.id}`);
                console.log(`   Arquivo: ${newRecording.filename}`);
                
                // Limpar grava√ß√£o de teste
                await supabase
                    .from('recordings')
                    .delete()
                    .eq('id', newRecording.id);
                console.log('üßπ Grava√ß√£o de teste removida');
            }
        }
        
        // 4. Verificar estrutura de diret√≥rios
        console.log('\n4Ô∏è‚É£ Verificando estrutura de diret√≥rios...');
        const recordingsDir = path.join(__dirname, 'recordings');
        
        if (fs.existsSync(recordingsDir)) {
            console.log('‚úÖ Diret√≥rio de grava√ß√µes existe');
            const files = fs.readdirSync(recordingsDir);
            console.log(`   Arquivos encontrados: ${files.length}`);
            
            files.slice(0, 5).forEach(file => {
                const filePath = path.join(recordingsDir, file);
                const stats = fs.statSync(filePath);
                console.log(`   - ${file} (${stats.size} bytes)`);
            });
        } else {
            console.log('‚ùå Diret√≥rio de grava√ß√µes n√£o existe');
        }
        
        console.log('\nüéâ Teste do sistema de grava√ß√µes conclu√≠do!');
        
    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error);
    }
}

// Executar teste
testRecordingSystem();
import { default as streamingService } from './backend/src/services/StreamingService.js';
import { supabaseAdmin } from './backend/src/config/database.js';

async function forceReconnectCameras() {
  console.log('üîÑ For√ßando reconex√£o de todas as c√¢meras...');
  
  try {
    // Buscar todas as c√¢meras ativas
    const { data: cameras, error } = await supabaseAdmin
      .from('cameras')
      .select('*')
      .eq('status', 'online');
    
    if (error) {
      console.error('‚ùå Erro ao buscar c√¢meras:', error);
      return;
    }
    
    console.log(`üìπ Encontradas ${cameras.length} c√¢meras ativas`);
    
    for (const camera of cameras) {
      console.log(`\nüîå Reconectando c√¢mera: ${camera.name} (${camera.id})`);
      
      try {
        // Parar stream existente (se houver)
        await streamingService.stopStream(camera.id);
        console.log(`‚èπÔ∏è Stream parado para: ${camera.name}`);
        
        // Aguardar um pouco
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Iniciar novo stream
        const result = await streamingService.startStream(camera.id);
        console.log(`‚úÖ Stream iniciado para: ${camera.name}`, result);
        
      } catch (error) {
        console.error(`‚ùå Erro ao reconectar ${camera.name}:`, error.message);
      }
    }
    
    console.log('\nüéØ Processo de reconex√£o conclu√≠do');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
  
  process.exit(0);
}

forceReconnectCameras().catch(console.error);
import axios from 'axios';
import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// Carregar vari√°veis de ambiente
dotenv.config();

const API_BASE = 'http://localhost:3002/api';
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

let authToken = null;

async function getAuthToken() {
  try {
    console.log('üîê Obtendo token de autentica√ß√£o...');
    
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'test@recording.com',
      password: 'test123'
    });
    
    if (loginResponse.data.tokens) {
      authToken = loginResponse.data.tokens.accessToken;
      console.log('‚úÖ Login realizado com sucesso');
      return authToken;
    }
    
    throw new Error('Token n√£o retornado');
    
  } catch (error) {
    console.log('‚ùå Erro ao obter token:', error.response?.data || error.message);
    return null;
  }
}

async function testRecordingControlFunctions() {
  try {
    console.log('üß™ Testando fun√ß√µes de controle de grava√ß√£o...');
    
    // 1. Obter token de autentica√ß√£o
    const token = await getAuthToken();
    if (!token) {
      console.log('‚ùå N√£o foi poss√≠vel obter token. Abortando testes.');
      return;
    }
    
    const headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
    
    // 2. Listar grava√ß√µes existentes
    console.log('\nüìã Listando grava√ß√µes existentes...');
    try {
      const recordingsResponse = await axios.get(`${API_BASE}/recordings`, { headers });
      const recordings = recordingsResponse.data.data || [];
      console.log(`‚úÖ Total de grava√ß√µes: ${recordings.length}`);
      
      if (recordings.length > 0) {
        const activeRecordings = recordings.filter(r => r.status === 'recording');
        console.log(`üìπ Grava√ß√µes ativas: ${activeRecordings.length}`);
        
        // Mostrar algumas grava√ß√µes para teste
        recordings.slice(0, 3).forEach((recording, index) => {
          console.log(`   ${index + 1}. ID: ${recording.id}, Status: ${recording.status}, C√¢mera: ${recording.camera_id}`);
        });
        
        // 3. Testar fun√ß√µes de controle com a primeira grava√ß√£o
        if (recordings.length > 0) {
          const testRecording = recordings[0];
          await testControlFunctions(testRecording, headers);
        }
      } else {
        console.log('‚ö†Ô∏è Nenhuma grava√ß√£o encontrada para testar controles.');
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao listar grava√ß√µes:', error.response?.data || error.message);
    }
    
    // 4. Testar cria√ß√£o de nova grava√ß√£o
    await testCreateRecording(headers);
    
    // 5. Testar dele√ß√£o em lote
    await testBulkDelete(headers);
    
  } catch (error) {
    console.error('‚ùå Erro no teste de fun√ß√µes de controle:', error);
  }
}

async function testControlFunctions(recording, headers) {
  console.log(`\nüéÆ Testando controles para grava√ß√£o ${recording.id}...`);
  
  // Testar pause (se grava√ß√£o estiver ativa)
  if (recording.status === 'recording') {
    console.log('‚è∏Ô∏è Testando pausar grava√ß√£o...');
    try {
      const pauseResponse = await axios.post(`${API_BASE}/recordings/pause`, {
        cameraId: recording.camera_id,
        recordingId: recording.id
      }, { headers });
      console.log('‚úÖ Pause:', pauseResponse.data.message);
    } catch (error) {
      console.log('‚ùå Erro ao pausar:', error.response?.data?.message || error.message);
    }
    
    // Aguardar um pouco
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Testar resume
    console.log('‚ñ∂Ô∏è Testando retomar grava√ß√£o...');
    try {
      const resumeResponse = await axios.post(`${API_BASE}/recordings/resume`, {
        cameraId: recording.camera_id
      }, { headers });
      console.log('‚úÖ Resume:', resumeResponse.data.message);
    } catch (error) {
      console.log('‚ùå Erro ao retomar:', error.response?.data?.message || error.message);
    }
  }
  
  // Testar stop
  console.log('‚èπÔ∏è Testando parar grava√ß√£o...');
  try {
    const stopResponse = await axios.post(`${API_BASE}/recordings/${recording.id}/stop`, {}, { headers });
    console.log('‚úÖ Stop:', stopResponse.data.message);
  } catch (error) {
    console.log('‚ùå Erro ao parar:', error.response?.data?.message || error.message);
  }
  
  // Testar download (apenas verificar se a rota responde)
  console.log('üì• Testando prepara√ß√£o de download...');
  try {
    const downloadResponse = await axios.get(`${API_BASE}/recordings/${recording.id}/download`, {
      headers,
      maxRedirects: 0,
      validateStatus: function (status) {
        return status < 500; // Aceitar redirects e erros de cliente
      }
    });
    
    if (downloadResponse.status === 302) {
      console.log('‚úÖ Download: Redirecionamento para S3 configurado');
    } else if (downloadResponse.status === 200) {
      console.log('‚úÖ Download: Arquivo local dispon√≠vel');
    } else {
      console.log(`‚ö†Ô∏è Download: Status ${downloadResponse.status}`);
    }
  } catch (error) {
    if (error.response?.status === 404) {
      console.log('‚ö†Ô∏è Download: Arquivo n√£o encontrado (esperado para grava√ß√µes antigas)');
    } else {
      console.log('‚ùå Erro no download:', error.response?.data?.message || error.message);
    }
  }
}

async function testCreateRecording(headers) {
  console.log('\nüé¨ Testando cria√ß√£o de nova grava√ß√£o...');
  
  try {
    // Buscar c√¢meras dispon√≠veis
    const { data: cameras, error } = await supabase
      .from('cameras')
      .select('id, name, rtsp_url')
      .eq('active', true)
      .limit(1);
    
    if (error || !cameras || cameras.length === 0) {
      console.log('‚ö†Ô∏è Nenhuma c√¢mera ativa encontrada para teste');
      return;
    }
    
    const camera = cameras[0];
    console.log(`üìπ Testando com c√¢mera: ${camera.name} (${camera.id})`);
    
    const createResponse = await axios.post(`${API_BASE}/recordings`, {
      cameraId: camera.id
    }, { headers });
    
    console.log('‚úÖ Grava√ß√£o criada:', createResponse.data.message);
    console.log('üìù ID da nova grava√ß√£o:', createResponse.data.data?.id);
    
  } catch (error) {
    console.log('‚ùå Erro ao criar grava√ß√£o:', error.response?.data?.message || error.message);
  }
}

async function testBulkDelete(headers) {
  console.log('\nüóëÔ∏è Testando dele√ß√£o em lote...');
  
  try {
    // Buscar grava√ß√µes para deletar (apenas as mais antigas)
    const recordingsResponse = await axios.get(`${API_BASE}/recordings?limit=2`, { headers });
    const recordings = recordingsResponse.data.data || [];
    
    if (recordings.length === 0) {
      console.log('‚ö†Ô∏è Nenhuma grava√ß√£o dispon√≠vel para teste de dele√ß√£o');
      return;
    }
    
    // Filtrar apenas grava√ß√µes que n√£o est√£o ativas
    const inactiveRecordings = recordings.filter(r => r.status !== 'recording');
    
    if (inactiveRecordings.length === 0) {
      console.log('‚ö†Ô∏è Nenhuma grava√ß√£o inativa dispon√≠vel para teste de dele√ß√£o');
      return;
    }
    
    const recordingIds = inactiveRecordings.slice(0, 1).map(r => r.id); // Deletar apenas 1 para teste
    console.log(`üéØ Tentando deletar ${recordingIds.length} grava√ß√£o(√µes)`);
    
    const deleteResponse = await axios.delete(`${API_BASE}/recordings`, {
      headers,
      data: {
        recording_ids: recordingIds,
        confirm: true
      }
    });
    
    console.log('‚úÖ Dele√ß√£o:', deleteResponse.data.message);
    console.log(`üìä Deletadas: ${deleteResponse.data.deleted_count}, Falhas: ${deleteResponse.data.failed_count}`);
    
  } catch (error) {
    console.log('‚ùå Erro na dele√ß√£o em lote:', error.response?.data?.message || error.message);
  }
}

// Executar
testRecordingControlFunctions()
  .then(() => {
    console.log('\nüéâ Teste de fun√ß√µes de controle conclu√≠do!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• Erro fatal:', error);
    process.exit(1);
  });
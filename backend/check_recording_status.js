import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';

dotenv.config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);

async function checkRecordingStatus() {
  console.log('üîç VERIFICANDO STATUS DE GRAVA√á√ÉO');
  console.log('='.repeat(50));
  
  try {
    // 1. Verificar c√¢meras e configura√ß√£o de grava√ß√£o
    const { data: cameras, error: cameraError } = await supabase
      .from('cameras')
      .select('id, name, status, rtsp_url, recording_enabled');
    
    if (cameraError) {
      console.error('‚ùå Erro ao buscar c√¢meras:', cameraError);
      return;
    }
    
    console.log(`\nüìπ C√ÇMERAS ENCONTRADAS: ${cameras?.length || 0}`);
    cameras?.forEach(cam => {
      const recordingStatus = cam.recording_enabled ? 'üî¥ GRAVANDO' : '‚ö™ SEM GRAVA√á√ÉO';
      console.log(`- ${cam.name} (${cam.id})`);
      console.log(`  Status: ${cam.status}`);
      console.log(`  RTSP: ${cam.rtsp_url || 'N√£o configurado'}`);
      console.log(`  Grava√ß√£o: ${recordingStatus}`);
      console.log('');
    });
    
    // 2. Verificar grava√ß√µes recentes
    const { data: recordings, error: recordingError } = await supabase
      .from('recordings')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (recordingError) {
      console.error('‚ùå Erro ao buscar grava√ß√µes:', recordingError);
    } else {
      console.log(`\nüìº GRAVA√á√ïES RECENTES: ${recordings?.length || 0}`);
      recordings?.forEach(rec => {
        const duration = rec.duration ? `${Math.round(rec.duration / 60)}min` : 'N/A';
        console.log(`- ${rec.filename} (${duration})`);
        console.log(`  C√¢mera: ${rec.camera_id}`);
        console.log(`  Data: ${new Date(rec.created_at).toLocaleString('pt-BR')}`);
        console.log(`  Status: ${rec.status}`);
        console.log('');
      });
    }
    
    // 3. Verificar diret√≥rio de grava√ß√µes
    const recordingsPath = path.join(process.cwd(), 'recordings', 'record', 'live');
    console.log(`\nüìÅ VERIFICANDO DIRET√ìRIO: ${recordingsPath}`);
    
    if (fs.existsSync(recordingsPath)) {
      const cameraFolders = fs.readdirSync(recordingsPath, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory())
        .map(dirent => dirent.name);
      
      console.log(`‚úÖ Diret√≥rio existe com ${cameraFolders.length} pastas de c√¢meras`);
      
      cameraFolders.forEach(cameraId => {
        const cameraPath = path.join(recordingsPath, cameraId);
        try {
          const files = fs.readdirSync(cameraPath)
            .filter(file => file.endsWith('.mp4'));
          console.log(`  üìπ ${cameraId}: ${files.length} arquivos MP4`);
        } catch (err) {
          console.log(`  üìπ ${cameraId}: Erro ao ler diret√≥rio`);
        }
      });
    } else {
      console.log('‚ùå Diret√≥rio de grava√ß√µes n√£o existe');
    }
    
    // 4. Verificar configura√ß√£o de grava√ß√£o autom√°tica
    const camerasWithRecording = cameras?.filter(cam => cam.recording_enabled) || [];
    
    console.log(`\n‚öôÔ∏è RESUMO DO SISTEMA:`);
    console.log(`- Total de c√¢meras: ${cameras?.length || 0}`);
    console.log(`- C√¢meras com grava√ß√£o habilitada: ${camerasWithRecording.length}`);
    console.log(`- Grava√ß√µes no banco: ${recordings?.length || 0}`);
    
    if (camerasWithRecording.length === 0) {
      console.log('\n‚ö†Ô∏è  PROBLEMA IDENTIFICADO:');
      console.log('   Nenhuma c√¢mera tem grava√ß√£o habilitada!');
      console.log('   Para habilitar grava√ß√£o, execute:');
      console.log('   UPDATE cameras SET recording_enabled = true WHERE id = \'[camera_id]\';');
    }
    
    if (!recordings || recordings.length === 0) {
      console.log('\n‚ö†Ô∏è  PROBLEMA IDENTIFICADO:');
      console.log('   N√£o h√° grava√ß√µes no banco de dados!');
      console.log('   Poss√≠veis causas:');
      console.log('   1. ZLMediaKit n√£o est√° rodando');
      console.log('   2. Webhook n√£o est√° configurado');
      console.log('   3. C√¢meras n√£o est√£o enviando stream RTSP');
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

checkRecordingStatus();
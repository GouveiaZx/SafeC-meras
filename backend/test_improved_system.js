/**
 * Script de teste para verificar o sistema melhorado de grava√ß√µes
 * Testa: webhook ‚Üí banco ‚Üí localiza√ß√£o robusta ‚Üí player
 */

import { createClient } from '@supabase/supabase-js';
import ImprovedRecordingService from './src/services/RecordingService_improved.js';
import fetch from 'node-fetch';
import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { v4 as uuidv4 } from 'uuid';
import dotenv from 'dotenv';

// Configurar vari√°veis de ambiente
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const API_BASE = 'http://localhost:3002';

async function testImprovedSystem() {
  console.log('üöÄ TESTE DO SISTEMA MELHORADO DE GRAVA√á√ïES');
  console.log('=' .repeat(60));
  
  try {
    // 1. Verificar se o sistema est√° limpo
    console.log('\n1Ô∏è‚É£ Verificando estado inicial do sistema...');
    const { data: existingRecordings, error } = await supabase
      .from('recordings')
      .select('*')
      .limit(5);
    
    if (error) {
      console.error('‚ùå Erro ao verificar grava√ß√µes:', error);
      return;
    }
    
    console.log(`   üìä Grava√ß√µes existentes: ${existingRecordings.length}`);
    
    // 2. Buscar ou criar c√¢mera de teste
    console.log('\n2Ô∏è‚É£ Preparando c√¢mera de teste...');
    
    let testCameraId;
    
    // Buscar c√¢mera existente
    const { data: existingCameras } = await supabase
      .from('cameras')
      .select('id')
      .limit(1);
    
    if (existingCameras && existingCameras.length > 0) {
      testCameraId = existingCameras[0].id;
      console.log('   ‚úÖ Usando c√¢mera existente:', testCameraId);
    } else {
      // Criar c√¢mera tempor√°ria
      testCameraId = uuidv4();
      const { error: cameraError } = await supabase
        .from('cameras')
        .insert([{
          id: testCameraId,
          name: 'C√¢mera de Teste',
          rtsp_url: 'rtsp://test.example.com/stream',
          status: 'active',
          created_at: new Date().toISOString()
        }]);
      
      if (cameraError) {
        console.error('‚ùå Erro ao criar c√¢mera de teste:', cameraError);
        return;
      }
      console.log('   ‚úÖ C√¢mera de teste criada:', testCameraId);
    }
    
    // 3. Criar uma grava√ß√£o de teste no banco
    console.log('\n3Ô∏è‚É£ Criando grava√ß√£o de teste no banco...');
    
    const testRecording = {
      id: uuidv4(),
      camera_id: testCameraId,
      filename: `test-video-${Date.now()}.mp4`,
      file_path: 'test-video.mp4',
      local_path: null, // Ser√° definido pela localiza√ß√£o robusta
      file_size: 1024000,
      duration: 30,
      status: 'completed',
      quality: 'medium',
      event_type: 'manual',
      start_time: new Date().toISOString(),
      end_time: new Date(Date.now() + 30000).toISOString(),
      created_at: new Date().toISOString()
    };
    
    const { data: insertedRecording, error: insertError } = await supabase
      .from('recordings')
      .insert([testRecording])
      .select()
      .single();
    
    if (insertError) {
      console.error('‚ùå Erro ao inserir grava√ß√£o de teste:', insertError);
      return;
    }
    
    console.log('   ‚úÖ Grava√ß√£o de teste criada:', insertedRecording.id);
    
    // 4. Criar arquivo de teste f√≠sico
    console.log('\n4Ô∏è‚É£ Criando arquivo de teste f√≠sico...');
    
    const recordingsDir = path.join(__dirname, 'recordings');
    await fs.mkdir(recordingsDir, { recursive: true });
    
    const testFilePath = path.join(recordingsDir, testRecording.filename);
    const testContent = Buffer.alloc(1024, 'test video content'); // 1KB de dados de teste
    
    await fs.writeFile(testFilePath, testContent);
    console.log('   ‚úÖ Arquivo de teste criado:', testFilePath);
    
    // 5. Testar localiza√ß√£o robusta
    console.log('\n5Ô∏è‚É£ Testando localiza√ß√£o robusta de arquivos...');
    
    const locationResult = await ImprovedRecordingService.locateRecordingFile(insertedRecording);
    
    if (locationResult.found) {
      console.log('   ‚úÖ Arquivo localizado com sucesso!');
      console.log(`   üìÅ Estrat√©gia: ${locationResult.strategy}`);
      console.log(`   üìÑ Caminho: ${locationResult.filePath}`);
      console.log(`   üìä Tamanho: ${locationResult.fileSize} bytes`);
    } else {
      console.log('   ‚ùå Falha na localiza√ß√£o:', locationResult.reason);
    }
    
    // 6. Testar prepareDownload
    console.log('\n6Ô∏è‚É£ Testando prepareDownload...');
    
    const downloadInfo = await ImprovedRecordingService.prepareDownload(insertedRecording.id);
    
    if (downloadInfo.exists) {
      console.log('   ‚úÖ PrepareDownload bem-sucedido!');
      console.log(`   üìÅ Estrat√©gia: ${downloadInfo.strategy}`);
      console.log(`   üìÑ Arquivo: ${downloadInfo.filename}`);
      console.log(`   üìä Tamanho: ${downloadInfo.fileSize} bytes`);
    } else {
      console.log('   ‚ùå PrepareDownload falhou:', downloadInfo.message);
    }
    
    // 7. Testar getFileStream
    console.log('\n7Ô∏è‚É£ Testando getFileStream...');
    
    if (downloadInfo.exists && !downloadInfo.isS3) {
      try {
        const streamInfo = await ImprovedRecordingService.getFileStream(downloadInfo.filePath);
        console.log('   ‚úÖ Stream criado com sucesso!');
        console.log(`   üìä Tamanho total: ${streamInfo.totalSize} bytes`);
        
        // Testar stream com range
        const rangeStreamInfo = await ImprovedRecordingService.getFileStream(
          downloadInfo.filePath, 
          'bytes=0-99'
        );
        console.log('   ‚úÖ Stream com range criado!');
        console.log(`   üìä Range: ${rangeStreamInfo.contentRange}`);
        
      } catch (streamError) {
        console.log('   ‚ùå Erro ao criar stream:', streamError.message);
      }
    }
    
    // 8. Testar sincroniza√ß√£o de todas as grava√ß√µes
    console.log('\n8Ô∏è‚É£ Testando sincroniza√ß√£o de grava√ß√µes...');
    
    const syncResult = await ImprovedRecordingService.syncAllRecordings();
    console.log('   üìä Resultado da sincroniza√ß√£o:');
    console.log(`   ‚úÖ Sincronizadas: ${syncResult.synced}`);
    console.log(`   ‚ùå Falharam: ${syncResult.failed}`);
    console.log(`   üìã Total: ${syncResult.total}`);
    
    // 9. Verificar se local_path foi atualizado
    console.log('\n9Ô∏è‚É£ Verificando atualiza√ß√£o do local_path...');
    
    const { data: updatedRecording } = await supabase
      .from('recordings')
      .select('*')
      .eq('id', insertedRecording.id)
      .single();
    
    if (updatedRecording.local_path) {
      console.log('   ‚úÖ local_path atualizado:', updatedRecording.local_path);
    } else {
      console.log('   ‚ö†Ô∏è local_path ainda n√£o foi definido');
    }
    
    // 10. Simular teste de API (se servidor estiver rodando)
    console.log('\nüîü Testando API endpoints...');
    
    try {
      // Testar endpoint de streaming
      const streamResponse = await fetch(`${API_BASE}/api/recordings/${insertedRecording.id}/stream`, {
        method: 'HEAD', // Usar HEAD para n√£o baixar o arquivo
        headers: {
          'Range': 'bytes=0-99'
        }
      });
      
      console.log(`   üì° Stream endpoint: ${streamResponse.status} ${streamResponse.statusText}`);
      
      if (streamResponse.status === 206 || streamResponse.status === 200) {
        console.log('   ‚úÖ Streaming funcionando!');
        console.log(`   üìä Content-Length: ${streamResponse.headers.get('content-length')}`);
        console.log(`   üìä Content-Range: ${streamResponse.headers.get('content-range')}`);
      }
      
    } catch (apiError) {
      console.log('   ‚ö†Ô∏è API n√£o dispon√≠vel (servidor n√£o est√° rodando)');
    }
    
    // 11. Limpeza
    console.log('\nüßπ Limpando dados de teste...');
    
    // Remover arquivo de teste
    try {
      await fs.unlink(testFilePath);
      console.log('   ‚úÖ Arquivo de teste removido');
    } catch (error) {
      console.log('   ‚ö†Ô∏è Erro ao remover arquivo de teste:', error.message);
    }
    
    // Remover grava√ß√£o de teste do banco
    const { error: deleteError } = await supabase
      .from('recordings')
      .delete()
      .eq('id', insertedRecording.id);
    
    if (deleteError) {
      console.log('   ‚ö†Ô∏è Erro ao remover grava√ß√£o de teste:', deleteError.message);
    } else {
      console.log('   ‚úÖ Grava√ß√£o de teste removida do banco');
    }
    
    console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
    console.log('=' .repeat(60));
    console.log('‚úÖ Sistema melhorado est√° funcionando corretamente');
    console.log('‚úÖ Localiza√ß√£o robusta de arquivos implementada');
    console.log('‚úÖ Streaming com suporte a Range requests');
    console.log('‚úÖ Sincroniza√ß√£o autom√°tica de local_path');
    
  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE:', error);
    console.error('Stack trace:', error.stack);
  }
}

// Executar teste
testImprovedSystem().catch(console.error);
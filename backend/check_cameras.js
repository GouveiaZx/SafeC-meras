import { supabaseAdmin } from './src/config/database.js';
import { createModuleLogger } from './src/config/logger.js';

const logger = createModuleLogger('CheckCameras');

async function checkCameras() {
  try {
    console.log('üîç Verificando c√¢meras no banco de dados...');
    
    // Buscar todas as c√¢meras
    const { data: cameras, error, count } = await supabaseAdmin
      .from('cameras')
      .select('*', { count: 'exact' });
    
    if (error) {
      console.error('‚ùå Erro ao buscar c√¢meras:', error);
      return;
    }
    
    console.log(`üìä Total de c√¢meras no banco: ${count}`);
    
    if (cameras && cameras.length > 0) {
      console.log('\nüìã Lista de c√¢meras:');
      cameras.forEach((camera, index) => {
        console.log(`${index + 1}. ID: ${camera.id}`);
        console.log(`   Nome: ${camera.name}`);
        console.log(`   Status: ${camera.status}`);
        console.log(`   Ativo: ${camera.active}`);
        console.log(`   IP: ${camera.ip_address}`);
        console.log(`   RTSP URL: ${camera.rtsp_url}`);
        console.log(`   Criado em: ${camera.created_at}`);
        console.log('   ---');
      });
    } else {
      console.log('‚ùå Nenhuma c√¢mera encontrada no banco de dados!');
    }
    
    // Verificar tamb√©m se h√° c√¢meras inativas
    const { data: inactiveCameras, error: inactiveError } = await supabaseAdmin
      .from('cameras')
      .select('*')
      .eq('active', false);
    
    if (!inactiveError && inactiveCameras) {
      console.log(`\nüî¥ C√¢meras inativas: ${inactiveCameras.length}`);
    }
    
    // Verificar c√¢meras por status
    const { data: onlineCameras, error: onlineError } = await supabaseAdmin
      .from('cameras')
      .select('*')
      .eq('status', 'online');
    
    if (!onlineError && onlineCameras) {
      console.log(`üü¢ C√¢meras online: ${onlineCameras.length}`);
    }
    
    const { data: offlineCameras, error: offlineError } = await supabaseAdmin
      .from('cameras')
      .select('*')
      .eq('status', 'offline');
    
    if (!offlineError && offlineCameras) {
      console.log(`üî¥ C√¢meras offline: ${offlineCameras.length}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar c√¢meras:', error);
  }
}

checkCameras().then(() => {
  console.log('\n‚úÖ Verifica√ß√£o conclu√≠da');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Erro na verifica√ß√£o:', error);
  process.exit(1);
});
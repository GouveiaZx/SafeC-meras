#!/usr/bin/env node

/**
 * Script para debugar o fluxo completo de grava√ß√£o
 * Verifica:
 * 1. Status do ZLMediaKit
 * 2. Streams ativos
 * 3. Configura√ß√£o de grava√ß√£o
 * 4. Webhooks
 * 5. Sincroniza√ß√£o com banco
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

// Configura√ß√µes
const ZLM_API_URL = 'http://localhost:8000';
const ZLM_SECRET = '9QqL3M2K7vHQexkbfp6RvbCUB3GkV4MK';

// Fun√ß√£o auxiliar para executar comandos
function execCommand(command) {
    try {
        return execSync(command, { encoding: 'utf8' }).trim();
    } catch (error) {
        return `Erro: ${error.message}`;
    }
}

// Fun√ß√£o para fazer chamadas HTTP
async function fetchZLM(api) {
    try {
        const response = await fetch(`${ZLM_API_URL}${api}?secret=${ZLM_SECRET}`);
        return await response.json();
    } catch (error) {
        return { error: error.message };
    }
}

// 1. Verificar status do ZLMediaKit
async function checkZLMStatus() {
    console.log('=== STATUS DO ZLMEDIAKIT ===');
    
    try {
        const response = await fetch(`${ZLM_API_URL}/index/api/getServerConfig?secret=${ZLM_SECRET}`);
        const data = await response.json();
        
        if (data.code === 0) {
            console.log('‚úÖ ZLMediaKit est√° rodando');
            console.log(`üìä Vers√£o: ${data.data.version || 'N/A'}`);
            console.log(`‚è∞ Uptime: ${data.data.uptime || 'N/A'}`);
        } else {
            console.log('‚ùå Erro ao verificar ZLMediaKit:', data.msg);
        }
    } catch (error) {
        console.log('‚ùå ZLMediaKit n√£o est√° acess√≠vel:', error.message);
    }
}

// 2. Verificar streams ativos
async function checkActiveStreams() {
    console.log('\n=== STREAMS ATIVOS ===');
    
    try {
        const response = await fetch(`${ZLM_API_URL}/index/api/getMediaList?secret=${ZLM_SECRET}`);
        const data = await response.json();
        
        if (data.code === 0 && data.data && data.data.length > 0) {
            console.log(`‚úÖ ${data.data.length} stream(s) ativo(s) encontrado(s):`);
            
            data.data.forEach((stream, index) => {
                console.log(`\n${index + 1}. Stream: ${stream.app}/${stream.stream}`);
                console.log(`   üìπ V√≠deo: ${stream.video.codec_name || 'N/A'} ${stream.video.width}x${stream.video.height}`);
                console.log(`   üîä √Åudio: ${stream.audio.codec_name || 'N/A'}`);
                console.log(`   üë• Viewers: ${stream.totalReaderCount}`);
                console.log(`   üì¶ Bytes: ${stream.totalBytes}`);
                console.log(`   ‚è±Ô∏è  Dura√ß√£o: ${Math.round(stream.duration / 1000)}s`);
            });
        } else {
            console.log('‚ö†Ô∏è  Nenhum stream ativo encontrado');
        }
    } catch (error) {
        console.log('‚ùå Erro ao verificar streams:', error.message);
    }
}

// 3. Verificar configura√ß√£o de grava√ß√£o
function checkRecordingConfig() {
    console.log('\n=== CONFIGURA√á√ÉO DE GRAVA√á√ÉO ===');
    
    // Verificar se o diret√≥rio de grava√ß√£o existe
    const recordingDir = '/opt/media/bin/www/record';
    const command = `docker exec newcam-zlmediakit ls -la ${recordingDir}`;
    const result = execCommand(command);
    
    if (!result.includes('Erro')) {
        console.log('‚úÖ Diret√≥rio de grava√ß√£o existe');
        
        // Listar arquivos de grava√ß√£o
        const filesCommand = `docker exec newcam-zlmediakit find ${recordingDir} -name "*.mp4" -type f | wc -l`;
        const filesCount = execCommand(filesCommand);
        console.log(`üìÅ Total de arquivos MP4: ${filesCount}`);
        
        // √öltimos arquivos
        const latestFiles = execCommand(`docker exec newcam-zlmediakit find ${recordingDir} -name "*.mp4" -type f -printf "%T@ %p\n" | sort -n | tail -5`);
        if (latestFiles && !latestFiles.includes('Erro')) {
            console.log('üìÖ √öltimos arquivos:');
            latestFiles.split('\n').forEach(file => {
                if (file.trim()) {
                    const [timestamp, path] = file.split(' ');
                    const date = new Date(parseFloat(timestamp) * 1000);
                    console.log(`   ${date.toLocaleString()} - ${path.split('/').pop()}`);
                }
            });
        }
    } else {
        console.log('‚ùå Diret√≥rio de grava√ß√£o n√£o encontrado');
    }
}

// 4. Verificar webhooks
function checkWebhooks() {
    console.log('\n=== WEBHOOKS ===');
    
    // Verificar se o backend est√° respondendo
    const webhookUrl = 'http://localhost:3002/api/webhooks/on_record_mp4';
    const testData = JSON.stringify({
        app: 'live',
        stream: 'test',
        file_name: 'test.mp4',
        file_path: '/record/test.mp4',
        file_size: 1024
    });
    
    try {
        const response = execCommand(`curl -s -X POST http://localhost:3002/api/webhooks/on_record_mp4 -H "Content-Type: application/json" -d '${testData}'`);
        console.log('‚úÖ Webhook est√° acess√≠vel');
        console.log('üì® Resposta:', response);
    } catch (error) {
        console.log('‚ùå Webhook n√£o est√° acess√≠vel:', error.message);
    }
}

// 5. Verificar banco de dados
async function checkDatabase() {
    console.log('\n=== BANCO DE DADOS ===');
    
    try {
        const { createClient } = await import('../src/lib/supabase.js');
        const supabase = createClient();
        
        const { data, error } = await supabase
            .from('recordings')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(10);
            
        if (error) {
            console.log('‚ùå Erro ao consultar banco:', error.message);
        } else {
            console.log(`‚úÖ ${data.length} grava√ß√£o(√µes) no banco`);
            
            if (data.length > 0) {
                data.forEach((recording, index) => {
                    console.log(`\n${index + 1}. ${recording.filename}`);
                    console.log(`   üìπ C√¢mera: ${recording.camera_id}`);
                    console.log(`   üì¶ Tamanho: ${recording.file_size}`);
                    console.log(`   üìÖ Criado: ${new Date(recording.created_at).toLocaleString()}`);
                    console.log(`   üìä Status: ${recording.status}`);
                });
            }
        }
    } catch (error) {
        console.log('‚ùå Erro ao conectar ao banco:', error.message);
    }
}

// 6. Verificar configura√ß√£o de grava√ß√£o autom√°tica
function checkAutoRecording() {
    console.log('\n=== CONFIGURA√á√ÉO DE GRAVA√á√ÉO AUTOM√ÅTICA ===');
    
    // Verificar config do ZLMediaKit
    const config = execCommand('docker exec newcam-zlmediakit cat /opt/media/conf/config.ini');
    
    if (config.includes('enable_mp4=1')) {
        console.log('‚úÖ Grava√ß√£o MP4 est√° habilitada');
    } else {
        console.log('‚ùå Grava√ß√£o MP4 est√° desabilitada');
    }
    
    if (config.includes('fileSecond=1800')) {
        console.log('‚úÖ Grava√ß√£o a cada 30 minutos est√° configurada');
    } else {
        console.log('‚ùå Configura√ß√£o de intervalo de grava√ß√£o n√£o encontrada');
    }
    
    if (config.includes('on_record_mp4=http://host.docker.internal:3002')) {
        console.log('‚úÖ Webhook de grava√ß√£o est√° configurado');
    } else {
        console.log('‚ùå Webhook de grava√ß√£o n√£o est√° configurado');
    }
}

// Fun√ß√£o principal
async function main() {
    console.log('üîç DEBUG DO FLUXO DE GRAVA√á√ÉO');
    console.log('='.repeat(50));
    
    await checkZLMStatus();
    await checkActiveStreams();
    checkRecordingConfig();
    checkWebhooks();
    checkAutoRecording();
    
    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ Verifica√ß√£o conclu√≠da!');
    
    // Recomenda√ß√µes
    console.log('\nüìã RECOMENDA√á√ïES:');
    console.log('1. Verifique se a c√¢mera est√° enviando RTSP para o ZLMediaKit');
    console.log('2. Confirme se o webhook est√° recebendo as notifica√ß√µes de grava√ß√£o');
    console.log('3. Verifique os logs do ZLMediaKit para erros de grava√ß√£o');
    console.log('4. Teste manualmente a grava√ß√£o com a API do ZLMediaKit');
}

// Executar
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch(console.error);
}

export { main };
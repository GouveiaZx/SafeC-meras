const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://grkvfzuadctextnbpajb.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdya3ZmenVhZGN0ZXh0bmJwYWpiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzIyNDIzOCwiZXhwIjoyMDY4ODAwMjM4fQ.XJoPu5InA_s3pfryZfSChBqZnu7zBV3vwH7ZM4jf04M';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixUserTable() {
  try {
    console.log('üîç Verificando usu√°rios na tabela users...');
    
    // 1. Listar todos os usu√°rios na tabela users
    const { data: usersInTable, error: usersError } = await supabase
      .from('users')
      .select('*');
    
    if (usersError) {
      console.error('‚ùå Erro ao buscar usu√°rios na tabela:', usersError);
      return;
    }
    
    console.log(`üìä Encontrados ${usersInTable.length} usu√°rios na tabela users:`);
    usersInTable.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.email} (ID: ${user.id}) - Ativo: ${user.active}`);
    });
    
    // 2. Listar usu√°rios no Supabase Auth
    console.log('\nüîç Verificando usu√°rios no Supabase Auth...');
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.error('‚ùå Erro ao buscar usu√°rios no Auth:', authError);
      return;
    }
    
    console.log(`üìä Encontrados ${authUsers.users.length} usu√°rios no Supabase Auth:`);
    authUsers.users.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.email} (ID: ${user.id})`);
    });
    
    // 3. Encontrar usu√°rios que est√£o no Auth mas n√£o na tabela users
    console.log('\nüîç Verificando inconsist√™ncias...');
    const missingUsers = authUsers.users.filter(authUser => 
      !usersInTable.find(tableUser => tableUser.id === authUser.id)
    );
    
    if (missingUsers.length === 0) {
      console.log('‚úÖ Todos os usu√°rios do Auth est√£o na tabela users');
      return;
    }
    
    console.log(`‚ö†Ô∏è Encontrados ${missingUsers.length} usu√°rios no Auth que n√£o est√£o na tabela users:`);
    missingUsers.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.email} (ID: ${user.id})`);
    });
    
    // 4. Criar registros na tabela users para os usu√°rios faltantes
    console.log('\nüîß Criando registros na tabela users...');
    
    for (const authUser of missingUsers) {
      console.log(`\nüìù Criando registro para ${authUser.email}...`);
      
      const userData = {
        id: authUser.id,
        email: authUser.email,
        name: authUser.user_metadata?.name || authUser.email.split('@')[0],
        role: 'admin', // Definindo como admin por padr√£o
        active: true,
        permissions: ['read', 'write', 'admin'],
        camera_access: [],
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      const { data: newUser, error: insertError } = await supabase
        .from('users')
        .insert(userData)
        .select()
        .single();
      
      if (insertError) {
        console.error(`‚ùå Erro ao criar usu√°rio ${authUser.email}:`, insertError);
      } else {
        console.log(`‚úÖ Usu√°rio ${authUser.email} criado com sucesso na tabela users`);
      }
    }
    
    // 5. Verificar novamente
    console.log('\nüîç Verifica√ß√£o final...');
    const { data: finalUsers, error: finalError } = await supabase
      .from('users')
      .select('*');
    
    if (finalError) {
      console.error('‚ùå Erro na verifica√ß√£o final:', finalError);
      return;
    }
    
    console.log(`‚úÖ Total de usu√°rios na tabela users: ${finalUsers.length}`);
    finalUsers.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.email} (ID: ${user.id}) - Ativo: ${user.active}`);
    });
    
    console.log('\nüéâ Sincroniza√ß√£o conclu√≠da! Agora todos os usu√°rios do Auth est√£o na tabela users.');
    
  } catch (err) {
    console.error('‚ùå Erro geral:', err);
  }
}

fixUserTable();
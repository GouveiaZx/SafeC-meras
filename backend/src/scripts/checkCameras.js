/**
 * Script para verificar o status das c√¢meras no banco de dados
 */

import { supabaseAdmin } from '../config/database.js';
import { createModuleLogger } from '../config/logger.js';

const logger = createModuleLogger('CheckCameras');

async function checkCameras() {
  try {
    logger.info('üîç Verificando status das c√¢meras...');
    
    // Buscar todas as c√¢meras
    const { data: cameras, error } = await supabaseAdmin
      .from('cameras')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error) {
      logger.error('‚ùå Erro ao buscar c√¢meras:', error.message);
      return;
    }
    
    if (!cameras || cameras.length === 0) {
      logger.info('‚ùå Nenhuma c√¢mera encontrada no banco de dados');
      logger.info('üí° SOLU√á√ÉO: Adicione c√¢meras atrav√©s da interface ou API');
      return;
    }
    
    logger.info(`‚úÖ Encontradas ${cameras.length} c√¢meras:`);
    
    cameras.forEach((camera, index) => {
      logger.info(`\nüìπ C√¢mera ${index + 1}:`);
      logger.info(`   ID: ${camera.id}`);
      logger.info(`   Nome: ${camera.name}`);
      logger.info(`   Status: ${camera.status}`);
      logger.info(`   Ativa: ${camera.active}`);
      logger.info(`   RTSP URL: ${camera.rtsp_url || 'N√£o configurada'}`);
      logger.info(`   Localiza√ß√£o: ${camera.location || 'N√£o definida'}`);
      logger.info(`   √öltima visualiza√ß√£o: ${camera.last_seen || 'Nunca'}`);
      logger.info(`   Streaming: ${camera.is_streaming ? 'Sim' : 'N√£o'}`);
      logger.info(`   Gravando: ${camera.is_recording ? 'Sim' : 'N√£o'}`);
    });
    
    // Estat√≠sticas
    const onlineCameras = cameras.filter(c => c.status === 'online').length;
    const offlineCameras = cameras.filter(c => c.status === 'offline').length;
    const activeCameras = cameras.filter(c => c.active === true).length;
    const streamingCameras = cameras.filter(c => c.is_streaming === true).length;
    
    logger.info('\nüìä ESTAT√çSTICAS:');
    logger.info(`   Total de c√¢meras: ${cameras.length}`);
    logger.info(`   C√¢meras ativas: ${activeCameras}`);
    logger.info(`   C√¢meras online: ${onlineCameras}`);
    logger.info(`   C√¢meras offline: ${offlineCameras}`);
    logger.info(`   C√¢meras transmitindo: ${streamingCameras}`);
    
    if (offlineCameras > 0) {
      logger.info('\n‚ö†Ô∏è  PROBLEMAS IDENTIFICADOS:');
      logger.info(`   ${offlineCameras} c√¢meras est√£o offline`);
      logger.info('\nüí° PR√ìXIMOS PASSOS:');
      logger.info('   1. Verificar se o worker est√° rodando');
      logger.info('   2. Verificar conectividade com as c√¢meras');
      logger.info('   3. Verificar configura√ß√£o do ZLMediaKit/SRS');
      logger.info('   4. Verificar URLs RTSP das c√¢meras');
    }
    
  } catch (error) {
    logger.error('üí• Erro:', error.message);
  }
}

async function main() {
  try {
    await checkCameras();
    logger.info('\n‚úÖ Verifica√ß√£o conclu√≠da!');
    process.exit(0);
  } catch (error) {
    logger.error('üí• Falha na verifica√ß√£o:', error);
    process.exit(1);
  }
}

main();
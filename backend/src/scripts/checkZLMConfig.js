/**
 * Script para verificar e corrigir a configura√ß√£o do ZLMediaKit
 * Verifica se a grava√ß√£o autom√°tica est√° habilitada
 */

import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import axios from 'axios';
import { createModuleLogger } from '../config/logger.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Carregar .env
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

const logger = createModuleLogger('ZLMConfigChecker');

const ZLM_API_URL = process.env.ZLM_API_URL || 'http://localhost:8000/index/api';
const ZLM_SECRET = process.env.ZLM_SECRET || '9QqL3M2K7vHQexkbfp6RvbCUB3GkV4MK';

async function checkZLMConfiguration() {
  try {
    logger.info('üîç VERIFICANDO CONFIGURA√á√ÉO DO ZLMEDIAKIT...');

    // 1. Verificar configura√ß√£o atual
    const configResponse = await axios.post(`${ZLM_API_URL}/getServerConfig`, {
      secret: ZLM_SECRET
    }, {
      timeout: 10000
    });

    if (configResponse.data.code === 0) {
      const config = configResponse.data.data[0];
      
      logger.info('üìã CONFIGURA√á√ÉO ATUAL:', {
        'record.recordMp4': config['record.recordMp4'],
        'record.enableFmp4': config['record.enableFmp4'],
        'record.mp4MaxSecond': config['record.mp4MaxSecond'],
        'hook.enable': config['hook.enable'],
        'hook.on_record_mp4': config['hook.on_record_mp4'],
        'hook.timeoutSec': config['hook.timeoutSec']
      });

      // Verificar se grava√ß√£o autom√°tica est√° habilitada
      const recordMp4Enabled = config['record.recordMp4'] === 1 || config['record.recordMp4'] === '1';
      const hookEnabled = config['hook.enable'] === 1 || config['hook.enable'] === '1';
      const recordHookEnabled = config['hook.on_record_mp4'];

      logger.info('üéØ STATUS DOS RECURSOS:', {
        'Grava√ß√£o MP4 autom√°tica': recordMp4Enabled ? '‚úÖ HABILITADA' : '‚ùå DESABILITADA',
        'Hooks habilitados': hookEnabled ? '‚úÖ HABILITADO' : '‚ùå DESABILITADO', 
        'Hook on_record_mp4': recordHookEnabled ? `‚úÖ CONFIGURADO (${recordHookEnabled})` : '‚ùå N√ÉO CONFIGURADO',
        'Intervalo de grava√ß√£o': config['record.mp4MaxSecond'] ? `${config['record.mp4MaxSecond']}s` : 'N√ÉO DEFINIDO'
      });

      // 2. Corrigir configura√ß√£o se necess√°rio
      if (!recordMp4Enabled) {
        logger.warn('‚ö†Ô∏è GRAVA√á√ÉO AUTOM√ÅTICA DESABILITADA - Habilitando...');
        
        const updateResponse = await axios.post(`${ZLM_API_URL}/setServerConfig`, {
          secret: ZLM_SECRET,
          'record.recordMp4': 1,
          'record.mp4MaxSecond': 1800, // 30 minutos
          'record.enableFmp4': 0,
          'hook.enable': 1,
          'hook.on_record_mp4': 'http://localhost:3002/api/hook/on_record_mp4',
          'hook.timeoutSec': 10
        }, {
          timeout: 10000
        });

        if (updateResponse.data.code === 0) {
          logger.info('‚úÖ CONFIGURA√á√ÉO CORRIGIDA COM SUCESSO!');
        } else {
          logger.error('‚ùå ERRO AO CORRIGIR CONFIGURA√á√ÉO:', updateResponse.data);
        }
      }

      // 3. Verificar status de streams ativos
      const streamsResponse = await axios.post(`${ZLM_API_URL}/getMediaList`, {
        secret: ZLM_SECRET
      });

      if (streamsResponse.data.code === 0) {
        const streams = streamsResponse.data.data || [];
        logger.info(`üì∫ STREAMS ATIVOS: ${streams.length}`);
        
        streams.forEach(stream => {
          logger.info(`  - ${stream.app}/${stream.stream}: ${stream.readerCount} espectadores, gravando: ${stream.aliveSecond}s`);
        });
      }

      // 4. Testar conectividade do webhook
      logger.info('üîó TESTANDO CONECTIVIDADE DO WEBHOOK...');
      try {
        const webhookTest = await axios.post('http://localhost:3002/api/hook/on_record_mp4', {
          test: true,
          message: 'Teste de conectividade do webhook'
        }, {
          timeout: 5000
        });
        
        logger.info('‚úÖ WEBHOOK RESPONDEU:', webhookTest.status);
      } catch (webhookError) {
        logger.error('‚ùå WEBHOOK N√ÉO RESPONDEU:', webhookError.message);
      }

    } else {
      logger.error('‚ùå ERRO AO OBTER CONFIGURA√á√ÉO:', configResponse.data);
    }

  } catch (error) {
    logger.error('‚ùå ERRO GERAL:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      logger.error('üö´ ZLMediaKit n√£o est√° acess√≠vel. Verifique se Docker est√° rodando.');
    }
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  checkZLMConfiguration()
    .then(() => {
      logger.info('‚úÖ Verifica√ß√£o conclu√≠da');
      process.exit(0);
    })
    .catch((error) => {
      logger.error('‚ùå Verifica√ß√£o falhou:', error);
      process.exit(1);
    });
}

export default { checkZLMConfiguration };
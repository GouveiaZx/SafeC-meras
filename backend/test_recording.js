import { createClient } from '@supabase/supabase-js';
import recordingService from './src/services/RecordingService.js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testRecording() {
  try {
    console.log('üé¨ Testando sistema de grava√ß√£o...');
    
    // Buscar uma c√¢mera online
    const { data: cameras, error: camerasError } = await supabase
      .from('cameras')
      .select('*')
      .eq('status', 'online')
      .limit(1);
    
    if (camerasError || !cameras || cameras.length === 0) {
      console.log('‚ùå Nenhuma c√¢mera online encontrada');
      return;
    }
    
    const camera = cameras[0];
    console.log(`üìπ Testando com c√¢mera: ${camera.name} (${camera.id})`);
    console.log(`üì° RTSP URL: ${camera.rtsp_url}`);
    
    // Verificar configura√ß√µes necess√°rias
    console.log('\nüîß Verificando configura√ß√µes:');
    console.log(`ZLMEDIAKIT_API_URL: ${process.env.ZLMEDIAKIT_API_URL}`);
    console.log(`ZLMEDIAKIT_SECRET: ${process.env.ZLMEDIAKIT_SECRET ? '***configurado***' : 'N√ÉO CONFIGURADO'}`);
    console.log(`RECORDINGS_PATH: ${process.env.RECORDINGS_PATH}`);
    
    if (!process.env.ZLMEDIAKIT_API_URL || !process.env.ZLMEDIAKIT_SECRET) {
      console.log('‚ùå Configura√ß√µes do ZLMediaKit n√£o encontradas!');
      console.log('üí° Verifique se ZLMEDIAKIT_API_URL e ZLMEDIAKIT_SECRET est√£o configurados no .env');
      return;
    }
    
    // Usar RecordingService singleton
    // const recordingService j√° est√° importado
    
    console.log('\nüöÄ Tentando iniciar grava√ß√£o...');
    
    try {
      const result = await recordingService.startRecording(camera.id);
      console.log('‚úÖ Grava√ß√£o iniciada com sucesso!');
      console.log('üìä Resultado:', JSON.stringify(result, null, 2));
      
      // Aguardar alguns segundos e verificar se a grava√ß√£o foi criada no banco
      console.log('\n‚è≥ Aguardando 3 segundos para verificar o banco...');
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const { data: recordings, error: recordingsError } = await supabase
        .from('recordings')
        .select('*')
        .eq('camera_id', camera.id)
        .order('created_at', { ascending: false })
        .limit(1);
      
      if (!recordingsError && recordings && recordings.length > 0) {
        console.log('‚úÖ Grava√ß√£o encontrada no banco de dados!');
        console.log('üìã Detalhes:', JSON.stringify(recordings[0], null, 2));
        
        // Parar a grava√ß√£o ap√≥s o teste
        console.log('\nüõë Parando grava√ß√£o de teste...');
        const stopResult = await recordingService.stopRecording(camera.id, recordings[0].id);
        console.log('‚úÖ Grava√ß√£o parada:', JSON.stringify(stopResult, null, 2));
      } else {
        console.log('‚ùå Grava√ß√£o n√£o encontrada no banco de dados');
        console.log('üîç Erro:', recordingsError);
      }
      
    } catch (recordingError) {
      console.log('‚ùå Erro ao iniciar grava√ß√£o:', recordingError.message);
      console.log('üîç Detalhes do erro:', recordingError);
      
      // Verificar se √© um problema de conectividade com ZLMediaKit
      if (recordingError.message.includes('ECONNREFUSED') || recordingError.message.includes('timeout')) {
        console.log('\nüí° Poss√≠veis causas:');
        console.log('   1. ZLMediaKit n√£o est√° rodando');
        console.log('   2. URL do ZLMediaKit est√° incorreta');
        console.log('   3. Firewall bloqueando a conex√£o');
        console.log('   4. ZLMediaKit n√£o est√° configurado corretamente');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  }
}

testRecording();